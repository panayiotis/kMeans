var Visualization, iris1, iris2, yeast;

Visualization = (function() {
  function Visualization(options) {
    var class_name, color, data, element, features, force, height, info, km, link, links, margin, node, nodes, point_r, start, svg, tick, width, x, xAxis, x_feature, y, yAxis, y_feature;
    features = options.features;
    x_feature = options.x_feature;
    y_feature = options.y_feature;
    point_r = options.point_r;
    data = options.data;
    class_name = options.class_name;
    element = options.element;
    margin = {
      top: 20,
      right: 20,
      bottom: 40,
      left: 40
    };
    width = d3.select('#iris1').node().getBoundingClientRect().width - 80;
    height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
    height = height * 0.7 - margin.top - margin.bottom;
    console.log('width: ' + width);
    console.log('height: ' + height);
    console.log('data length: ' + data.length);
    nodes = [];
    links = [];
    svg = d3.select(element).append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
    info = d3.select(element).append('div').attr('class', 'info');
    color = d3.scale.category10();
    x = d3.scale.linear().range([0, width]);
    x.domain(d3.extent(data, function(d) {
      return d[x_feature];
    })).nice();
    xAxis = d3.svg.axis().scale(x).orient('bottom');
    xAxis.scale(x);
    y = d3.scale.linear().range([height, 0]);
    y.domain(d3.extent(data, function(d) {
      return d[y_feature];
    })).nice();
    yAxis = d3.svg.axis().scale(y).orient('left');
    yAxis.scale(y);
    svg.append('g').attr('class', 'x axis').call(xAxis).attr('transform', 'translate(0,' + height + ')').append('text').attr('class', 'label').attr('x', width).attr('y', -6).style('text-anchor', 'end').text(x_feature);
    svg.append('g').attr('class', 'y axis').call(yAxis).append('text').attr('transform', 'rotate(-90)').attr('class', 'label').attr('y', 6).attr('dy', '.71em').style('text-anchor', 'end').text(y_feature);
    setTimeout((function() {
      var inconclusive, legend;
      legend = svg.selectAll('.legend').data(color.domain()).enter().append('g').attr('class', 'legend').attr('transform', function(d, i) {
        return "translate(0," + (20 + i * 20) + ")";
      });
      legend.append('rect').attr('x', width).attr('width', 18).attr('height', 18).style('fill', color);
      legend.append('text').attr('x', width - 4).attr('y', 9).attr('dy', '.35em').style('text-anchor', 'end').text(function(d) {
        return d;
      });
      inconclusive = svg.append('g').attr('class', 'legend');
      inconclusive.append('rect').attr('x', width).attr('width', 18).attr('height', 18).style('fill', '#334C4C');
      return inconclusive.append('text').attr('x', width - 4).attr('y', 9).attr('dy', '.35em').style('text-anchor', 'end').text('inconclusive');
    }), 100);
    data.forEach(function(d, i) {
      d.x = x(d[x_feature]);
      return d.y = y(d[y_feature]);
    });
    node = svg.selectAll('.node');
    link = svg.selectAll('.link');
    tick = function(e) {
      node.attr('cx', function(d) {
        return d.x = x(d[x_feature]) * e.alpha + d.x * (1 - e.alpha);
      }).attr('cy', function(d) {
        return d.y = y(d[y_feature]) * e.alpha + d.y * (1 - e.alpha);
      });
      link.attr('x1', function(d) {
        return d.source.x;
      }).attr('y1', function(d) {
        return d.source.y;
      }).attr('x2', function(d) {
        return d.target.x;
      }).attr('y2', function(d) {
        return d.target.y;
      });
    };
    force = d3.layout.force().nodes(nodes).links(links).linkStrength(0).friction(0.0).linkDistance(0).charge(0).gravity(0).theta(.9).alpha(0.03).size([width, height]).on('tick', tick);
    start = function() {
      link = link.data(force.links(), function(d) {
        return d.source.id + '-' + d.target.id;
      });
      link.enter().insert('line', '.node').attr('class', 'link').style('stroke-width', 1.2).style('stroke', function(d) {
        if (d.cluster != null) {
          return color(d.cluster);
        } else {
          return '#334C4C';
        }
      });
      link.exit().remove();
      node = node.data(force.nodes());
      node.enter().append('circle').attr('class', function(d) {
        return 'node';
      }).style('fill', function(d) {
        if (d[class_name] != null) {
          return color(d[class_name]);
        } else if (d.dominant != null) {
          return color(d.dominant);
        } else {
          return '#334C4C';
        }
      }).attr('r', function(d) {
        if (d[class_name] != null) {
          return point_r;
        } else {
          if ((d.last != null) && d.last) {
            return 10;
          } else {
            return 3;
          }
        }
      }).style('stroke-width', function(d) {
        if (d.cluster != null) {
          if (d.cluster !== d[options.class_name]) {
            return 1.2;
          } else {
            return 1;
          }
        } else {
          return 2;
        }
      }).style('stroke', function(d) {
        if (d.cluster != null) {
          if (d.cluster !== d[options.class_name]) {
            return 'red';
          } else {
            return 'black';
          }
        } else {
          return 'black';
        }
      }).call(force.drag);
      node.exit().remove();
      force.start();
    };
    km = new kMeans(options);
    setTimeout((function() {
      console.log('Add ten nodes');
      km.initialize();
      km.run();
      km.classifyCentroids();
      nodes.push.apply(nodes, km.points());
      start();
    }), 0);
    setTimeout(((function(_this) {
      return function() {
        var km_info;
        console.log('Add Centroids and associated links');
        km_info = km.info();
        info.html(_this.kmInfoTable(km_info));
        nodes.push.apply(nodes, km.nodes());
        links.push.apply(links, km.links());
        start();
      };
    })(this)), 100);
    return;
  }

  Visualization.prototype.kmInfoTable = function(info) {
    var j, key, len, ref, table;
    table = '<table>\n';
    ref = Object.keys(info);
    for (j = 0, len = ref.length; j < len; j++) {
      key = ref[j];
      table += '<tr>\n';
      table += '<th>';
      table += key;
      table += '</th>';
      table += '<td>';
      table += info[key];
      table += '</td>';
      table += '\n';
      table += '</tr>\n';
    }
    table += '</table>\n';
    return table;
  };

  return Visualization;

})();

iris1 = {
  data: d3.csv.parse(window.iris_data),
  features: ['sepal length', 'sepal width', 'petal length', 'petal width'],
  x_feature: 'sepal length',
  y_feature: 'sepal width',
  class_name: 'species',
  clusters_size: 3,
  tolerance: 0.01,
  point_r: 8,
  element: '#iris1'
};

iris2 = {
  data: d3.csv.parse(window.iris_data),
  features: ['sepal length', 'sepal width', 'petal length', 'petal width'],
  x_feature: 'petal width',
  y_feature: 'petal length',
  class_name: 'species',
  clusters_size: 3,
  tolerance: 0.01,
  point_r: 6,
  element: '#iris2'
};

yeast = {
  data: d3.csv.parse(window.yeast_data),
  features: ['mcg', 'gvh', 'alm', 'mit', 'erl', 'pox', 'vac', 'nuc'],
  x_feature: 'mcg',
  y_feature: 'gvh',
  class_name: 'site',
  clusters_size: 10,
  iterations_limit: 1000,
  tolerance: 0.001,
  point_r: 3,
  element: '#yeast'
};

setTimeout((function() {
  return new Visualization(iris1);
}), 0);

setTimeout((function() {
  return new Visualization(iris2);
}), 500);

setTimeout((function() {
  return new Visualization(yeast);
}), 1000);

//# sourceMappingURL=data:application/json;base64,